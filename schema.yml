openapi: 3.0.3
info:
  title: YDS Dictionary API Project
  version: 1.0.0
  description: A sample dedicated dictionary to pass YDS exam
paths:
  /api/:
    get:
      operationId: root_retrieve
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/dj-rest-auth/login/:
    post:
      operationId: dj_rest_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/dj-rest-auth/logout/:
    post:
      operationId: dj_rest_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - dj-rest-auth
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/dj-rest-auth/password/change/:
    post:
      operationId: dj_rest_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/dj-rest-auth/password/reset/:
    post:
      operationId: dj_rest_auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/dj-rest-auth/password/reset/confirm/:
    post:
      operationId: dj_rest_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/dj-rest-auth/user/:
    get:
      operationId: dj_rest_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: dj_rest_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetails'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: dj_rest_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
  /api/en/games/:
    get:
      operationId: en_games_retrieve
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/en/games/single-word/:
    get:
      operationId: en_games_single_word_retrieve
      description: Info page for single word game
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/en/games/single-word/start/:
    get:
      operationId: en_games_single_word_start_retrieve
      description: Return a random English word for game
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: en_games_single_word_start_create
      description: Return a random English word for game
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /api/en/wordboxes/:
    get:
      operationId: en_wordboxes_retrieve
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: en_wordboxes_create
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /api/en/wordboxes/{id}/:
    get:
      operationId: en_wordboxes_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: en_wordboxes_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: en_wordboxes_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/en/wordboxes/{id}/start/:
    get:
      operationId: en_wordboxes_start_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: en_wordboxes_start_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /api/en/wordboxes/{id}/users/:
    get:
      operationId: en_wordboxes_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: en_wordboxes_users_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: en_wordboxes_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/en/wordboxes/{id}/words/:
    get:
      operationId: en_wordboxes_words_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: en_wordboxes_words_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: en_wordboxes_words_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/en/words/:
    get:
      operationId: en_words_retrieve
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: en_words_create
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /api/en/words/{word}/:
    get:
      operationId: en_words_retrieve_2
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: en_words_update
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: en_words_destroy
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/en/words/{word}/synonyms/:
    get:
      operationId: en_words_synonyms_retrieve
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: en_words_synonyms_create
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: en_words_synonyms_destroy
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/en/words/{word}/translations/:
    get:
      operationId: en_words_translations_retrieve
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: en_words_translations_create
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: en_words_translations_destroy
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - en
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/login-test-page/:
    get:
      operationId: login_test_page_retrieve
      tags:
      - login-test-page
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PatchedUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
      - key
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - pk
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
